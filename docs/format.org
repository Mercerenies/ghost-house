
* DIALOGUE FORMAT
  A dialogue object is a dictionary. Its elements are the various
  dialogue states, whose respective names are the dictionary keys. The
  values are arrays of instructions. A conversation always begins in
  the ~start~ state.

  An instruction is a dictionary. Instructions always have a ~command~
  key. All of the other keys depend on which instruction is being executed.

  + ~command~ (required) - Determines the instruction to execute.
** ~say~ Instruction
   Displays text to the screen in dialogue format.
   + ~text~ (required) - The text to display.
   + ~speaker~ (optional) - The speaker.
** ~goto~ Instruction
   Unconditionally jumps to a given state.
   + ~target~ (required) - The state to go to. This state must exist,
     but its instruction list can be empty (in which case the dialogue will
     end).
** ~end~ Instruction
   Ends the conversation. It is not strictly necessary to end a state
   with this instruction, but it makes the intention more clear.
** ~branch~ Instruction
   Provides the player with a set of options.
   + ~prompt~ (required) - The text to display.
   + ~speaker~ (optional) - The speaker.
   + ~options~ (required) - An array of options. Each option should
     have a ~text~ key and a ~state~ key.
** ~action~ Instruction
   Performs an action in the game room.
   + ~action~ (required) - The action to perform.
   + ~arg~ (o / r) - An argument. May be required, depending on the action.
*** ~noop~ Action
    Does nothing. No argument necessary.
*** ~harm_player~ Action
    Deals damage to the player. ~arg~ is required and must be a
    nonnegative integer.
*** ~furniture_drop~ Action
    Performs the furniture drop visual effect. ~arg~ is required and
    must be a sprite resource.
** ~dump_vars~ Instruction
   Prints out all of the variables currently available to the current
   dialogue in JSON form, for debugging purposes.
   + ~speaker~ (optional) - The speaker.
* ROOM FORMAT
  A room object specifies generation parameters for producing a room.
  It is a dictionary whose top-level keys are as follows. All of these
  are required. See ~room.json~.
